#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ES - Love for Elasticsearch

run `./es help` for a list of available commands
"""

import json
import sys
import os

from urllib import request
from urllib.error import HTTPError
from datetime import datetime, time
from collections import defaultdict

# some global settings
header_sep = "\u2502"
col_header = "\033[47;m\033[30;m"
col_normal = "\033[0m"


class ESM(object):
    def __init__(self, argv):
        self.host = os.getenv('ELASTICSEARCH_HOST')
        self.argv = argv

        if not self.host:
            print('Missing required environment variable: ELASTICSEARCH_HOST', file=sys.stderr)
            sys.exit()

    def _communicate(self, path, **kwargs):
        """Connect to an Elasticsearch node, parse the json response and return the object"""

        url = 'http://{}/{}'.format(os.getenv('ELASTICSEARCH_HOST'), path)
        parameters = {'url': url}
        parameters.update(**kwargs)
        try:
            return json.loads(request.urlopen(request.Request(**parameters)).read().decode('utf-8'))

        except HTTPError as e:
            return json.loads(e.read().decode('utf-8'))

        except:
            print('Could not decode url: {}'.format(url))
            raise

    def _timestamp(self, milliseconds):
        return datetime.strftime(datetime.utcfromtimestamp(int(milliseconds) / 1000), '%Y-%m-%d %H:%M:%S')

    def _pp_object(self, obj, nest='', prnt=True):
        if type(obj) is dict:
            out = list()
            for k, v in obj.items():
                if type(v) is list:
                    v = '\n' + '\n'.join(map(lambda v: self._pp_object(v, nest + '  ', prnt=False), v))

                elif type(v) is dict:
                    v = '\n' + self._pp_object(v, nest + '  ', prnt=False)

                out.append(nest + '%s: %s' % (k, v))

            out = '\n'.join(out)
            if prnt:
                print(out)

            return out

        elif prnt:
            print(str(obj))

        return str(obj)

    def _print_callables(self):
        c = [c for c in filter(lambda c: c[0] != '_' and c != 'run', dir(self)) if callable(getattr(self, c))]
        print('Available commands: {}'.format(' '.join(c)))

    def _table(self, rows, header=[], padding=2, sort=0):
        width = defaultdict(lambda: 0)

        for row in rows:
            for i in range(len(row)):
                w = len(str(row[i]))
                if width[i] < w:
                    width[i] = w

        if header and type(header) is list:
            line = []
            hl = len(header)
            for i in range(hl):
                line.append('%-*s' % (width[i] + (padding if i < hl - 1 else 0), header[i]))

            print('%s%s%s' % (col_header, header_sep.join(line), col_normal))

        for row in sorted(rows, key=lambda r: r[sort]):
            print(' '.join(map(
                lambda i: ('%-*s', '%*s')[type(row[i]) in (float, int)] % (max(width[i] + padding, len(header[i])), row[i]),
                range(len(row)))))

    def run(self):
        """
        The main runner method
        """
        if not self.argv or len(self.argv) < 2:
            self.help(['help']) # inception! :3

        else:
            command = sys.argv[1]
            args = sys.argv[2:]
            fn = getattr(self, command, None)

            if not (command and args and fn):
                self.help([command])

            else:
                fn(args)

    def help(self, args=None): # type(args) is list
        """
        For help on a specific command run: help <command>
        """
        command = args[0]
        args = args[1:]

        fn = getattr(self, command, None)

        if not fn:
            print('Command not available: {}'.format(command))
            self._print_callables()

        elif fn.__doc__ is None:
            print('No help available for command {}. Sorry.'.format(command))

        else:
            doc = '\n'.join(map(lambda s: s.strip(), fn.__doc__.strip().split('\n')))
            if command == 'help':
                self._print_callables()

            else:
                print('Help for command {}:'.format(command))

            print('{}'.format(doc))

    def alias(self, args):
        """
        create <alias> <index>    - create a new alias and point to index
        delete <alias>            - delete an alias
        replace <alias> <index>   - point an already existing alias to index
        list                      - list active aliases
        """

        command = args[0]
        args = args[1:]

        if command == 'create' and len(args) == 2:
            self._pp_object(self._communicate('%s/_alias/%s' % (args[1], args[0]), method='PUT'))

        elif command == 'delete' and len(args) == 1:
            self._pp_object(self._communicate('*/_alias/%s' % args[0], method='DELETE'))

        elif command == 'replace' and len(args) == 2:
            actions = {"actions" : [
                {"remove": {"index": "*", "alias": args[0]}},
                {"add": {"index": args[1], "alias": args[0]}}]}

            self._pp_object(self._communicate(
                '_aliases',
                method='POST',
                data=bytearray(json.dumps(actions), 'utf-8')))

        elif command == 'list':
            rows = list()
            for index, data in self._communicate('_alias').items():
                if data['aliases']:
                    for alias in data['aliases'].keys():
                        rows.append([alias, index])

            self._table(rows, header=['Alias', 'Index'])

        else:
            self.help(['alias'])

    def template(self, args):
        """
        create <template> <file>  - set a global index template with name with contents form file
        delete <template>         - delete a template
        describe <template>       - show the mapping of a specific template
        list                      - list current
        """

        command = args[0]
        args = args[1:]

        if command == 'create' and len(args) == 2:
            with open(os.path.expanduser(args[1]), 'rb') as fp:
                tpl = fp.read()
                self._pp_object(self._communicate('_template/%s' % args[0], method='PUT', data=tpl))

        elif command == 'delete' and len(args) == 1:
            self._pp_object(self._communicate('_template/%s' % args[0], method='DELETE'))

        elif command == 'describe' and len(args) == 1:
            self._pp_object(self._communicate('_template/%s' % args[0]))

        elif command == 'list':
            templates = self._communicate('_template')
            rows = list()
            for t in templates.keys():
                rows.append([t, templates[t]['template']])

            if rows:
                self._table(rows, header=['Template', 'Pattern'])

        else:
            self.help(['template'])

    def index(self, args):
        """
        create <index>            - create an index
        delete <index>            - delete an index and all its data
        describe <index>          - print index settings and mapping
        list                      - list all indexes
        """

        command = args[0]
        args = args[1:]

        if command == 'list':
            response = self._communicate('_settings')

            if response:
                rows = list()

                for index in filter(lambda x: x.find('.') != 0, response.keys()):
                    created = self._timestamp(response[index]['settings']['index']['creation_date'])
                    replicas = int(response[index]['settings']['index']['number_of_replicas'])
                    shards = int(response[index]['settings']['index']['number_of_shards'])

                    rows.append([index, created, replicas, shards])

                self._table(rows, sort=1, header=['Index', 'Created', 'Replicas', 'Shards'])

        elif command == 'create' and len(args) == 1:
            self._pp_object(self._communicate(args[0], method='PUT'))

        elif command == 'delete' and len(args) == 1:
            self._pp_object(self._communicate(args[0], method='DELETE'))

        elif command == 'describe' and len(args) == 1:
            self._pp_object(self._communicate('%s/_mappings?pretty' % args[0]))

        else:
            self.help(['index'])

if __name__ == "__main__":
    ESM(sys.argv).run()

